{"version":3,"sources":["games/lift/lift.initial-state.ts","games/lift/lift.action.ts","games/lift/utils/map-step-to-next-step.ts","games/lift/utils/map-step-to-target-keys.ts","games/lift/lift.hook.ts","hooks/use-key-down.ts","games/lift/index.tsx","games/lift/lift.reducer.ts","games/lift/utils/get-next-cycle-from-completed-step.ts","games/lift/lift.view.tsx"],"names":["Action","initialState","cycle","step","mapStepToNextStep","DOWN_KEYS","LEFT_KEYS","RIGHT_KEYS","UP_KEYS","useLift","callback","dispatch","targetKeys","useMemo","mapStepToTargetKeys","handleKeyDown","useCallback","e","includes","key","CompleteStep","useEffect","window","addEventListener","removeEventListener","lift","reducer","state","action","title","View"],"mappings":"8GAEA,ICFKA,EDOUC,EALa,CAC1BC,MAAO,EACPC,KAAM,I,SCJHH,O,gCAAAA,M,KAIUA,QCFA,SAASI,EAAkBD,GACxC,OAAQA,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,G,oBCbb,IAAME,EAAsB,CAAC,IAAK,YAAa,KACzCC,EAAsB,CAAC,IAAK,YAAa,KACzCC,EAAuB,CAAC,IAAK,aAAc,KAC3CC,EAAoB,CAAC,IAAK,UAAW,KCM5B,SAASC,EAAT,GAAmD,ICRhEC,EDQgCC,EAA+B,EAA/BA,SAAUR,EAAqB,EAArBA,KACpCS,EAAuBC,mBAC3B,kBDNW,SAA6BV,GAC1C,OAAQA,GACN,KAAK,EACH,OAAOG,EACT,KAAK,EACL,KAAK,EACH,OAAOE,EACT,KAAK,EACL,KAAK,EACH,OAAOH,EACT,KAAK,EACH,OAAOE,GCLOO,CAAoBX,KACpC,CAACA,IAGGY,EAAgBC,uBACpB,SAACC,GACKL,EAAWM,SAASD,EAAEE,MACxBR,EAASX,EAAOoB,gBAGpB,CAACT,EAAUC,ICpBbF,EDuBWK,ECrBXM,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWb,GAC5B,WACLY,OAAOE,oBAAoB,UAAWd,MAEvC,CAACA,ICHN,IAAMe,EAA4B,CAChCxB,eACAyB,QCJa,SAAiBC,EAAcC,GAC5C,OAAQA,GACN,KAAK5B,EAAOoB,aACV,MAAO,CACLlB,OCNNA,EDM2CyB,EAAMzB,MCLjDC,EDKwDwB,EAAMxB,KCHjD,IAATA,EACKD,EAAQ,EAEVA,GDCDC,KAAMC,EAAkBuB,EAAMxB,OCRvB,IACbD,EACAC,GFMA0B,MAAO,OACPC,KGLa,YAGiC,IAF9CnB,EAE6C,EAF7CA,SAE6C,IAD7CgB,MAASzB,EACoC,EADpCA,MAAOC,EAC6B,EAD7BA,KAIhB,OAFAM,EAAQ,CAAEE,WAAUR,SAGlB,qCACQD,EADR,IACgBC,KHALsB","file":"static/js/3.f4dc8b8d.chunk.js","sourcesContent":["import State from './lift.state';\n\nconst initialState: State = {\n  cycle: 0,\n  step: 0,\n};\n\nexport default initialState;\n","enum Action {\n  CompleteStep,\n}\n\nexport default Action;\n","import Step from '../types/step';\n\nexport default function mapStepToNextStep(step: Step): Step {\n  switch (step) {\n    case 0:\n      return 1;\n    case 1:\n      return 2;\n    case 2:\n      return 3;\n    case 3:\n      return 4;\n    case 4:\n      return 5;\n    case 5:\n      return 0;\n  }\n}\n","import Step from '../types/step';\n\nconst DOWN_KEYS: string[] = ['2', 'ArrowDown', 's'];\nconst LEFT_KEYS: string[] = ['4', 'ArrowLeft', 'a'];\nconst RIGHT_KEYS: string[] = ['6', 'ArrowRight', 'd'];\nconst UP_KEYS: string[] = ['8', 'ArrowUp', 'w'];\n\nexport default function mapStepToTargetKeys(step: Step): string[] {\n  switch (step) {\n    case 0:\n      return LEFT_KEYS;\n    case 1:\n    case 4:\n      return UP_KEYS;\n    case 2:\n    case 5:\n      return DOWN_KEYS;\n    case 3:\n      return RIGHT_KEYS;\n  }\n}\n","import { Dispatch, useCallback, useMemo } from 'react';\nimport useKeyDown from '../../hooks/use-key-down';\nimport Action from './lift.action';\nimport Step from './types/step';\nimport mapStepToTargetKeys from './utils/map-step-to-target-keys';\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  step: Step;\n}\n\nexport default function useLift({ dispatch, step }: Props): void {\n  const targetKeys: string[] = useMemo(\n    (): string[] => mapStepToTargetKeys(step),\n    [step],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent): void => {\n      if (targetKeys.includes(e.key)) {\n        dispatch(Action.CompleteStep);\n      }\n    },\n    [dispatch, targetKeys],\n  );\n\n  useKeyDown(handleKeyDown);\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyDown(\n  callback: (event: KeyboardEvent) => void,\n): void {\n  useEffect((): (() => void) => {\n    window.addEventListener('keydown', callback);\n    return (): void => {\n      window.removeEventListener('keydown', callback);\n    };\n  }, [callback]);\n}\n","import Game from '../../types/game';\nimport Action from './lift.action';\nimport initialState from './lift.initial-state';\nimport reducer from './lift.reducer';\nimport State from './lift.state';\nimport View from './lift.view';\n\nconst lift: Game<State, Action> = {\n  initialState,\n  reducer,\n  title: 'Lift',\n  View,\n};\n\nexport default lift;\n","import Action from './lift.action';\nimport State from './lift.state';\nimport getNextCycleFromCompletedStep from './utils/get-next-cycle-from-completed-step';\nimport mapStepToNextStep from './utils/map-step-to-next-step';\n\nexport default function reducer(state: State, action: Action): State {\n  switch (action) {\n    case Action.CompleteStep:\n      return {\n        cycle: getNextCycleFromCompletedStep(state.cycle, state.step),\n        step: mapStepToNextStep(state.step),\n      };\n  }\n}\n","import Step from '../types/step';\n\nexport default function getNextCycleFromCompletedStep(\n  cycle: number,\n  step: Step,\n): number {\n  if (step === 5) {\n    return cycle + 1;\n  }\n  return cycle;\n}\n","import React, { ReactElement } from 'react';\nimport GameViewProps from '../../types/game-view-props';\nimport Action from './lift.action';\nimport useLift from './lift.hook';\nimport State from './lift.state';\n\nexport default function Lift({\n  dispatch,\n  state: { cycle, step },\n}: GameViewProps<State, Action>): ReactElement {\n  useLift({ dispatch, step });\n\n  return (\n    <div>\n      Lift {cycle} {step}\n    </div>\n  );\n}\n"],"sourceRoot":""}