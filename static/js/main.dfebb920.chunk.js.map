{"version":3,"sources":["utils/map-component-factory-to-lazy-exotic-component.ts","utils/map-game-module-to-game-component-module.ts","utils/map-game-to-game-component.tsx","utils/map-game-module-to-game.ts","utils/sort-by-random.ts","components/app/app.hook.tsx","components/app/app.view.tsx","index.tsx"],"names":["mapComponentFactoryToLazyExoticComponent","factory","lazy","mapGameModuleToGameComponent","gameModule","default","initialState","reducer","View","onComplete","useReducer","state","dispatch","mapGameToGameComponent","sortByRandom","Math","random","GAME_COMPONENT_FACTORIES","then","mapGameModuleToGameComponentModule","getRandomizedLazyExoticGameComponents","map","sort","App","Game","useState","gameIndex","setGameIndex","randomizedLazyExoticGameComponents","useMemo","handleComplete","useCallback","oldGameIndex","RandomLazyExoticGameComponent","fallback","useApp","ReactDOM","render","document","getElementById"],"mappings":"0LAIe,SAASA,EACtBC,GAEA,OAAOC,eAAKD,GCAC,SAASE,EACtBC,GAIA,MAAO,CACLC,QCRW,YAIyB,IAHtCC,EAGqC,EAHrCA,aACAC,EAEqC,EAFrCA,QACAC,EACqC,EADrCA,KAEA,OAAO,YAAwD,IAAxCC,EAAuC,EAAvCA,WAAuC,EAClCC,qBACxBH,EACAD,GAH0D,mBACrDK,EADqD,KAC9CC,EAD8C,KAM5D,OAAO,kBAACJ,EAAD,CAAMI,SAAUA,EAAUH,WAAYA,EAAYE,MAAOA,KDL7BE,CADiBT,EENtDC,UCJa,SAASS,IACtB,OAAOC,KAAKC,SAAW,IAAO,EAAI,ECkBpC,IAAMC,EAAmD,CACvD,kBAAM,6BAA2BC,KAAKC,KAGlCC,EAAwC,WAM5C,OADMH,EAAyBI,IAAIrB,GACHsB,KAAKR,ICzBxB,SAASS,IAAqB,IACnCC,ED2BK,WAA0B,IAAD,EACJC,mBAAS,GADL,mBAC/BC,EAD+B,KACpBC,EADoB,KAGhCC,EAEAC,kBAAQT,EAAuC,IAE/CU,EAAiBC,uBAAY,WACjCJ,GAAa,SAACK,GAAD,OAAkCA,EAAe,OAC7D,IAeH,MAAO,CACLR,KAXGO,uBAAY,WACf,IAAME,EACJL,EAAmCF,GACrC,OACE,kBAAC,WAAD,CAAUQ,SAAS,cACjB,kBAACD,EAAD,CAA+BxB,WAAYqB,OAG9C,CAACJ,EAAWI,EAAgBF,KCjDdO,GAATX,KACR,OAAO,kBAACA,EAAD,MCFTY,IAASC,OAAO,kBAACd,EAAD,MAASe,SAASC,eAAe,W","file":"static/js/main.dfebb920.chunk.js","sourcesContent":["import { ComponentType, LazyExoticComponent, lazy } from 'react';\n\ntype ComponentFactory<Props> = () => Promise<{ default: ComponentType<Props> }>;\n\nexport default function mapComponentFactoryToLazyExoticComponent<Props>(\n  factory: ComponentFactory<Props>,\n): LazyExoticComponent<ComponentType<Props>> {\n  return lazy(factory);\n}\n","import Game from '../types/game';\nimport GameComponent from '../types/game-component';\nimport GameComponentModule from '../types/game-component-module';\nimport GameModule from '../types/game-module';\nimport mapGameModuleToGame from '../utils/map-game-module-to-game';\nimport mapGameToGameComponent from '../utils/map-game-to-game-component';\n\nexport default function mapGameModuleToGameComponent<State, Action>(\n  gameModule: GameModule<State, Action>,\n): GameComponentModule {\n  const game: Game<State, Action> = mapGameModuleToGame(gameModule);\n  const gameComponent: GameComponent = mapGameToGameComponent(game);\n  return {\n    default: gameComponent,\n  };\n}\n","import React, { ReactElement, Reducer, useReducer } from 'react';\nimport Game from '../types/game';\nimport GameComponent from '../types/game-component';\nimport GameProps from '../types/game-props';\n\nexport default function mapGameToGameComponent<State, Action>({\n  initialState,\n  reducer,\n  View,\n}: Game<State, Action>): GameComponent {\n  return function Game({ onComplete }: GameProps): ReactElement {\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(\n      reducer,\n      initialState,\n    );\n\n    return <View dispatch={dispatch} onComplete={onComplete} state={state} />;\n  };\n}\n","import Game from '../types/game';\nimport GameModule from '../types/game-module';\n\nexport default function mapGameModuleToGame<State, Action>({\n  default: game,\n}: GameModule<State, Action>): Game<State, Action> {\n  return game;\n}\n","export default function sortByRandom(): -1 | 1 {\n  return Math.random() < 0.5 ? -1 : 1;\n}\n","import React, {\n  ComponentType,\n  LazyExoticComponent,\n  ReactElement,\n  Suspense,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react';\nimport GameComponent from '../../types/game-component';\nimport GameComponentFactory from '../../types/game-component-factory';\nimport mapComponentFactoryToLazyExoticComponent from '../../utils/map-component-factory-to-lazy-exotic-component';\nimport mapGameModuleToGameComponentModule from '../../utils/map-game-module-to-game-component-module';\nimport sortByRandom from '../../utils/sort-by-random';\n\ninterface State {\n  Game: ComponentType<Record<string, void>>;\n}\n\nconst GAME_COMPONENT_FACTORIES: GameComponentFactory[] = [\n  () => import('../../games/lift').then(mapGameModuleToGameComponentModule),\n];\n\nconst getRandomizedLazyExoticGameComponents = (): LazyExoticComponent<\n  GameComponent\n>[] => {\n  const lazyExoticGameComponents: LazyExoticComponent<\n    GameComponent\n  >[] = GAME_COMPONENT_FACTORIES.map(mapComponentFactoryToLazyExoticComponent);\n  return lazyExoticGameComponents.sort(sortByRandom);\n};\n\nexport default function useApp(): State {\n  const [gameIndex, setGameIndex] = useState(0);\n\n  const randomizedLazyExoticGameComponents: LazyExoticComponent<\n    GameComponent\n  >[] = useMemo(getRandomizedLazyExoticGameComponents, []);\n\n  const handleComplete = useCallback((): void => {\n    setGameIndex((oldGameIndex: number): number => oldGameIndex + 1);\n  }, []);\n\n  const Game: ComponentType<Record<\n    string,\n    void\n  >> = useCallback((): ReactElement => {\n    const RandomLazyExoticGameComponent: LazyExoticComponent<GameComponent> =\n      randomizedLazyExoticGameComponents[gameIndex];\n    return (\n      <Suspense fallback=\"Loading...\">\n        <RandomLazyExoticGameComponent onComplete={handleComplete} />\n      </Suspense>\n    );\n  }, [gameIndex, handleComplete, randomizedLazyExoticGameComponents]);\n\n  return {\n    Game,\n  };\n}\n","import React from 'react';\nimport { ReactElement } from 'react';\nimport useApp from './app.hook';\n\nexport default function App(): ReactElement {\n  const { Game } = useApp();\n  return <Game />;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}